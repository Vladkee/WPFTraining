// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

namespace Model.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    [Migration("20200314143748_dbCreating")]
    partial class dbCreating
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.Entity.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("brand_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .HasColumnName("brand_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("brands","production");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            BrandName = "Apple"
                        },
                        new
                        {
                            BrandId = 2,
                            BrandName = "ASUS"
                        },
                        new
                        {
                            BrandId = 3,
                            BrandName = "Acer"
                        });
                });

            modelBuilder.Entity("Model.Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("category_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnName("category_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("categories","production");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Phone"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Notebook"
                        });
                });

            modelBuilder.Entity("Model.Entity.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("customer_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("customers","sales");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            City = "Odesa",
                            Email = "fedko@gmail.com",
                            FirstName = "Nikolay",
                            LastName = "Fedko",
                            Phone = "+380665338211",
                            State = "Default",
                            Street = "Nekimora, 101",
                            ZipCode = "51095"
                        },
                        new
                        {
                            CustomerId = 2,
                            City = "Lviv",
                            Email = "pepela@gmail.com",
                            FirstName = "Dmitriy",
                            LastName = "Pelepa",
                            Phone = "+380661125312",
                            State = "Default",
                            Street = "Svetlaya, 101",
                            ZipCode = "41111"
                        },
                        new
                        {
                            CustomerId = 3,
                            City = "Kharkiv",
                            Email = "boy777@gmail.com",
                            FirstName = "Oleg",
                            LastName = "Reshetilo",
                            Phone = "+380501460586",
                            State = "Default",
                            Street = "Zernovaya, 85",
                            ZipCode = "61194"
                        },
                        new
                        {
                            CustomerId = 4,
                            City = "Kharkiv",
                            Email = "kasat@gmail.com",
                            FirstName = "Alexey",
                            LastName = "Kasatkin",
                            Phone = "+380663110984",
                            State = "Default",
                            Street = "Akademika, 1",
                            ZipCode = "61095"
                        });
                });

            modelBuilder.Entity("Model.Entity.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnName("order_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasColumnName("order_status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnName("required_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnName("shipped_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("StaffId")
                        .HasColumnName("staff_id")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StoreId");

                    b.ToTable("orders","sales");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CustomerId = 1,
                            OrderDate = new DateTime(2020, 3, 14, 16, 37, 47, 223, DateTimeKind.Local).AddTicks(4913),
                            OrderStatus = "Delivered",
                            RequiredDate = new DateTime(2020, 3, 14, 16, 37, 47, 227, DateTimeKind.Local).AddTicks(523),
                            ShippedDate = new DateTime(2020, 3, 14, 16, 37, 47, 227, DateTimeKind.Local).AddTicks(1409),
                            StaffId = 1,
                            StoreId = 1
                        },
                        new
                        {
                            OrderId = 2,
                            CustomerId = 1,
                            OrderDate = new DateTime(2020, 3, 14, 16, 37, 47, 227, DateTimeKind.Local).AddTicks(3427),
                            OrderStatus = "Delivered",
                            RequiredDate = new DateTime(2020, 3, 14, 16, 37, 47, 227, DateTimeKind.Local).AddTicks(3468),
                            ShippedDate = new DateTime(2020, 3, 14, 16, 37, 47, 227, DateTimeKind.Local).AddTicks(3485),
                            StaffId = 2,
                            StoreId = 1
                        },
                        new
                        {
                            OrderId = 3,
                            CustomerId = 2,
                            OrderDate = new DateTime(2020, 3, 14, 16, 37, 47, 227, DateTimeKind.Local).AddTicks(3523),
                            OrderStatus = "On Holding",
                            RequiredDate = new DateTime(2020, 3, 14, 16, 37, 47, 227, DateTimeKind.Local).AddTicks(3527),
                            ShippedDate = new DateTime(2020, 3, 14, 16, 37, 47, 227, DateTimeKind.Local).AddTicks(3532),
                            StaffId = 3,
                            StoreId = 2
                        },
                        new
                        {
                            OrderId = 4,
                            CustomerId = 2,
                            OrderDate = new DateTime(2020, 3, 14, 16, 37, 47, 227, DateTimeKind.Local).AddTicks(3538),
                            OrderStatus = "On Holding",
                            RequiredDate = new DateTime(2020, 3, 14, 16, 37, 47, 227, DateTimeKind.Local).AddTicks(3543),
                            ShippedDate = new DateTime(2020, 3, 14, 16, 37, 47, 227, DateTimeKind.Local).AddTicks(3547),
                            StaffId = 4,
                            StoreId = 2
                        });
                });

            modelBuilder.Entity("Model.Entity.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("order_id")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<int?>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("int");

                    b.Property<decimal>("ListPrice")
                        .HasColumnName("list_price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("orders_items","sales");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ProductId = 1,
                            ListPrice = 500.00m,
                            Quantity = 20
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 2,
                            Discount = 10,
                            ListPrice = 100.00m,
                            Quantity = 30
                        },
                        new
                        {
                            OrderId = 3,
                            ProductId = 3,
                            Discount = 5,
                            ListPrice = 1000.00m,
                            Quantity = 100
                        },
                        new
                        {
                            OrderId = 4,
                            ProductId = 4,
                            ListPrice = 350.00m,
                            Quantity = 66
                        });
                });

            modelBuilder.Entity("Model.Entity.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("product_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnName("brand_id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("int");

                    b.Property<decimal>("ListPrice")
                        .HasColumnName("list_price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ModelYear")
                        .HasColumnName("model_year")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnName("product_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("products","production");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            ListPrice = 20000.00m,
                            ModelYear = 2018,
                            ProductName = "IPhone X"
                        },
                        new
                        {
                            ProductId = 2,
                            BrandId = 1,
                            CategoryId = 1,
                            ListPrice = 15000.00m,
                            ModelYear = 2018,
                            ProductName = "IPhone 8"
                        },
                        new
                        {
                            ProductId = 3,
                            BrandId = 1,
                            CategoryId = 1,
                            ListPrice = 10000.00m,
                            ModelYear = 2017,
                            ProductName = "IPhone 7"
                        },
                        new
                        {
                            ProductId = 4,
                            BrandId = 2,
                            CategoryId = 2,
                            ListPrice = 21000.00m,
                            ModelYear = 2018,
                            ProductName = "Notebook 15"
                        },
                        new
                        {
                            ProductId = 5,
                            BrandId = 3,
                            CategoryId = 2,
                            ListPrice = 17000.00m,
                            ModelYear = 2015,
                            ProductName = "Butterfly 19"
                        });
                });

            modelBuilder.Entity("Model.Entity.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("staff_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnName("active")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerId")
                        .HasColumnName("manager_id")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("int");

                    b.HasKey("StaffId");

                    b.HasIndex("StoreId");

                    b.ToTable("staffs","sales");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            Email = "vlad@gmail.com",
                            FirstName = "Vlad",
                            IsActive = true,
                            LastName = "Radchenko",
                            Phone = "+380990527544",
                            StoreId = 1
                        },
                        new
                        {
                            StaffId = 2,
                            Email = "roman@gmail.com",
                            FirstName = "Roman",
                            IsActive = true,
                            LastName = "Sokolenko",
                            ManagerId = 1,
                            Phone = "+380506447544",
                            StoreId = 1
                        },
                        new
                        {
                            StaffId = 3,
                            Email = "andrey@gmail.com",
                            FirstName = "Andrey",
                            IsActive = true,
                            LastName = "Fedorchenko",
                            ManagerId = 1,
                            Phone = "+380993349763",
                            StoreId = 2
                        },
                        new
                        {
                            StaffId = 4,
                            Email = "tanya@gmail.com",
                            FirstName = "Tanya",
                            IsActive = true,
                            LastName = "Ryzyk",
                            ManagerId = 1,
                            Phone = "+380991144267",
                            StoreId = 2
                        });
                });

            modelBuilder.Entity("Model.Entity.Stock", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("stocks","production");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            ProductId = 1,
                            Quantity = 50
                        },
                        new
                        {
                            StoreId = 1,
                            ProductId = 2,
                            Quantity = 25
                        },
                        new
                        {
                            StoreId = 2,
                            ProductId = 3,
                            Quantity = 100
                        });
                });

            modelBuilder.Entity("Model.Entity.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("store_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .HasColumnName("store_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreId");

                    b.ToTable("stores","sales");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            City = "Kyiv",
                            Email = "n.shop@gmail.com",
                            Phone = "+380578445793",
                            State = "Default",
                            StoreName = "North Shop",
                            Street = "Shevchenko, 14",
                            ZipCode = "55483"
                        },
                        new
                        {
                            StoreId = 2,
                            City = "Kharkiv",
                            Email = "s.shop@gmail.com",
                            Phone = "+380578445790",
                            State = "Default",
                            StoreName = "South Shop",
                            Street = "Naukova, 20",
                            ZipCode = "61111"
                        });
                });

            modelBuilder.Entity("Model.Entity.Order", b =>
                {
                    b.HasOne("Model.Entity.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entity.Staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entity.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entity.OrderItem", b =>
                {
                    b.HasOne("Model.Entity.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entity.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entity.Product", b =>
                {
                    b.HasOne("Model.Entity.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entity.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entity.Staff", b =>
                {
                    b.HasOne("Model.Entity.Store", "Store")
                        .WithMany("Staffs")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entity.Stock", b =>
                {
                    b.HasOne("Model.Entity.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entity.Store", "Store")
                        .WithMany("Stocks")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
